'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _tracker = require('meteor/tracker');

var _meteor = require('meteor/meteor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _redux = require('redux');

var _reactRedux = require('react-redux');

var _actions = require('./actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return (0, _redux.bindActionCreators)({ setReady: _actions.setReady }, dispatch);
};

exports.default = function (ComposedComponent) {
  var SubscriptionComponent = function (_Component) {
    _inherits(SubscriptionComponent, _Component);

    function SubscriptionComponent() {
      _classCallCheck(this, SubscriptionComponent);

      var _this = _possibleConstructorReturn(this, (SubscriptionComponent.__proto__ || Object.getPrototypeOf(SubscriptionComponent)).call(this));

      _this.subs = {};
      _this.ready = {};
      return _this;
    }

    _createClass(SubscriptionComponent, [{
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        var _this2 = this;

        Object.keys(this.subs).map(function (key) {
          return _this2.subs[key].stop();
        });
        Object.keys(this.ready).map(function (key) {
          return _this2.ready[key].stop();
        });
      }
    }, {
      key: 'subscribe',
      value: function subscribe(name) {
        var _this3 = this;

        if (this.subs[name]) this.subs[name].stop();

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        this.subs[name] = _meteor.Meteor.subscribe.apply(_meteor.Meteor, [name].concat(args));

        _tracker.Tracker.autorun(function (comp) {
          _this3.ready[name] = comp;
          _this3.props.setReady(name, _this3.subs[name].ready());
        });
      }
    }, {
      key: 'subscriptionReady',
      value: function subscriptionReady(name) {
        return this.props.mongo.collectionsReady[name];
      }
    }, {
      key: 'render',
      value: function render() {
        return _react2.default.createElement(ComposedComponent, _extends({}, this.props, {
          subscribe: this.subscribe.bind(this),
          subscriptionReady: this.subscriptionReady.bind(this)
        }));
      }
    }]);

    return SubscriptionComponent;
  }(_react.Component);

  SubscriptionComponent.propTypes = {
    mongo: _react.PropTypes.object.isRequired,
    setReady: _react.PropTypes.func.isRequired
  };

  return (0, _reactRedux.connect)(function (fn) {
    return fn;
  }, mapDispatchToProps)(SubscriptionComponent);
};